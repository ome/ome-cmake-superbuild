#!/bin/sh
#
# Build with Jenkins CI.  This script is intended for use with the OME
# Jenkins CI infrastructure, though it may be useful as an example for
# how one might use various cmake options.
#
################################################################################

set -e

# Get OS name and version
os_version() {
  system="$(uname -s)"
  machine="$(uname -m)"

  case "$system" in
      Linux*)
          echo "$(lsb_release -si | sed -e 's;[[:space:]]*;;g')$(lsb_release -sr | sed -e 's;[[:space:]]*;;g' | sed -e 's;^\([^.][^.]*\)\.\([^.][^.]*\).*;\1.\2;')-$machine"
          ;;
      FreeBSD*)
          echo "$(freebsd-version | sed -e 's;\([^-]*\)-.*;FreeBSD\1;')-$machine"
          ;;
      Darwin*)
          echo "$(sw_vers | grep ^ProductVersion: | sed -e 's;^ProductVersion:[[:space:]]*\(.*\)\.\(.*\)\(\..*\)*;MacOSX\1.\2;')-$machine"
          ;;
      *)
          echo "$(uname -sr | sed -e 's;[[:space:]]*;;g')-$machine"
          ;;
      esac
}

current_tree() {
    (
        cd "${sourcedir}"
        git log -1 --pretty=%T "$git_branch" --
    )
}

cached_tree() {
    [ -f "${cachedir}/tree" ] && cat "${cachedir}/tree"
}

save_tree() {
  echo "$(current_tree)" > "${cachedir}/tree"
}

make_cache() {
    rm -rf "${cachedir}/build"
    rm -rf "${cachedir}/tools-build"
    cp -a "stage" "${cachedir}/build"
    cp -a "tools" "${cachedir}/tools-build"
    save_tree
}

restore_cache() {
    rm -rf "stage"
    rm -rf "tools"
    mkdir -p "stage"
    mkdir -p "tools"
    cp -a "${cachedir}/build" "stage"
    cp -a "${cachedir}/tools-build" "tools"
}

# Purge cache if required
# Create cache dir, including source cache
check_cache_validity() {

    echo "Current tree: $(current_tree)"
    echo "Cached tree: $(cached_tree)"

    PURGE_SOURCE=false
    PURGE_BUILD=true
    if [ "$purge" = "all" ] || [ "$purge" = "source" ]; then
        echo "Requested purging of source cache"
        PURGE_SOURCE=true
    fi

    if [ -n "$(cached_tree)" ]; then
        if [ "$purge" = "all" ] || [ "$purge" = "build" ]; then
            echo "Requested purging of build cache"
        elif [ "$(current_tree)" != "$(cached_tree)" ]; then
            echo "Changes made; purging build cache"
        else
            echo "No changes; retaining build cache"
            PURGE_BUILD=false
        fi
    else
        echo "Build cache not present or incomplete"
    fi

    if [ "$PURGE_SOURCE" = "true" ]; then
        rm -rf "${cachedir}/source"
        rm -rf "${cachedir}/tools"
    fi

    if [ "$PURGE_BUILD" = "true" ]; then
        rm -rf "${cachedir}/build"
        rm -rf "${cachedir}/tools-build"
        rm -rf "${cachedir}/tree"
    fi

    mkdir -p "${cachedir}/source"
}

# Run build
build() {
    # Use build cache if present; set environment so it's detected by
    # cmake and exclude cached prerequisites from build.  Note that
    # since gtest isn't installed and cached, so we still need to
    # build it.
    CMAKE_PREREQS="-Dbuild-prerequisites:BOOL=ON"
    if [ "$build_tp_prereqs" = "OFF" ] || [ -n "$(cached_tree)" ]; then
        CMAKE_PREREQS="-Dbuild-prerequisites:BOOL=OFF -Dome-cmake-superbuild_BUILD_gtest:BOOL=ON"
        if [ -n "$(cached_tree)" ]; then
            CMAKE_PREREQS="${CMAKE_PREREQS} -Dbuild-cache:PATH=${cachedir}/build -Dtool-build-cache:PATH=${cachedir}/tools-build"
        fi
    fi

    CMAKE_OPTIONS=
    if [ -n "$CMAKE_PREFIX_PATH" ]; then
        CMAKE_OPTIONS="-DCMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH"
    fi

    GIT_OPTIONS=
    if [ "$build_git" = "ON" ];then
        GIT_OPTIONS="-Dome-model-dir=${workspace}/ome-model -Dome-files-dir=${workspace}/ome-files -Dome-common-dir=${workspace}/ome-common  -Dome-files-performance-dir=${workspace}/ome-files-performance -Dome-qtwidgets-dir=${workspace}/ome-qtwidgets -Dome-files-py-dir=${workspace}/ome-files-py"
    fi

    rm -rf "$builddir" "$installdir"
    mkdir -p "$builddir" "$installdir"

    (
        cd "$builddir"
        # Note that due to using a local git mirror, the ome-model-git-branch
        # is HEAD since it's already at the correct commit
        cmake \
            -G "$build_system" \
            -DCMAKE_VERBOSE_MAKEFILE:BOOL="$verbose" \
            -DCMAKE_BUILD_TYPE="$build_type" \
            -DCMAKE_INSTALL_PREFIX:PATH=${installdir}/stage \
            ${CMAKE_OPTIONS} \
            ${GIT_OPTIONS} \
            "-Ddoxygen:BOOL=$doxygen" \
            "-Dextended-tests:BOOL=$extended_tests" \
            "-Dbuild-packages=${build_packages}" \
            -Dparallel:BOOL="$parallel_opt" \
            -Dsphinx:BOOL=ON \
            "-Dsphinx-linkcheck:BOOL=${linkcheck}" \
            -Dsource-cache:PATH=${cachedir}/source \
            -Dtool-cache:PATH=${cachedir}/tools \
            -DSOURCE_ARCHIVE_DIR="${artefactdir}/sources" \
            ${CMAKE_PREREQS} \
            ${sourcedir}

        # Make and cache prerequisites if missing
        if [ "$build_tp_prereqs" = "ON" ]; then
            if [ -n "$(cached_tree)" ]; then
                restore_cache
            else
                echo "Building prerequisites"
                cmake --build . --target third-party-prerequisites -- $parallel
                make_cache
            fi
        fi

        # Build superbuild (and run tests)
        echo "Building everything"
        cmake --build . -- $parallel

        # Install
        echo "Installing"
        cmake --build . --target install -- $parallel
    )

    # Release version
    eval $(cat "${builddir}/ome-files-build/config")
    version_tag="${OME_VERSION}-${build_type}-$(os_version)"
    if [ -n "$build_number" ]; then
        version_tag="${version_tag}-b${build_number}"
    fi
    docs_version_tag="${OME_VERSION}"
    if [ -n "$build_number" ]; then
        docs_version_tag="${docs_version_tag}-b${build_number}"
    fi
    echo "Built and installed version ${version_tag}"

    if [ "$build_tp_prereqs" = "OFF" ]; then
        bundle_name="ome-files-platform-bundle-${version_tag}"
    else
        bundle_name="ome-files-standalone-bundle-${version_tag}"
    fi
    docs_bundle_name="ome-files-bundle-docs-${docs_version_tag}"
    echo "Renaming staged install to ${bundle_name}"
    rm -rf "${installdir}/${bundle_name}"
    mv "${installdir}/stage" "${installdir}/${bundle_name}"

    for component in ome-common ome-model ome-xml ome-files ome-qtwidgets ome-cmake-superbuild; do
        if [ -d "${builddir}/stage/share/doc/${component}" ]; then
            mkdir -p "${installdir}/${docs_bundle_name}"
            echo "Installing documentation for ${component}"
            cp -r "${builddir}/stage/share/doc/${component}" "${installdir}/${docs_bundle_name}"
        fi
    done
    for file in "${builddir}/stage/share/doc/"*.html "${builddir}/stage/share/doc/"*.inv "${builddir}/stage/share/doc/"*.js "${builddir}/stage/share/doc/"_*; do
        cp -r "${file}" "${installdir}/${docs_bundle_name}"
    done

    # Source releases
    if [ "$build_git" = "ON" ]; then
        (
            echo "Making source release for ome-cmake-superbuild"
            cd "${builddir}"
            cmake --build . --target source-archive
            echo "Making source release for ome-cmake-superbuild: done"
        )
        for component in ome-common ome-model ome-files ome-qtwidgets; do
            (
                if [ -d "${builddir}/${component}-build" ]; then
                    echo "Making source release for ${component}"
                    cd "${builddir}/${component}-build"
                    cmake --build . --target source-archive
                    echo "Making source release for ${component}: done"
                fi
            )
        done
    fi

    # Archive builds
    (
        # Remove SCHILY extensions to tar on MacOS X.
        export COPYFILE_DISABLE=1
        cd "${installdir}"
        if [ "$(uname -s)" = "Linux" ]; then
            ROOTCMD=
            TAR_OPTIONS="--owner=root --group=root"
        else
            ROOTCMD=fakeroot
            TAR_OPTIONS="--format pax"
        fi
        mkdir -p "${artefactdir}/binaries"

        echo "Archiving ${bundle_name}.tar.xz"
        $ROOTCMD tar -cf - $TAR_OPTIONS "${bundle_name}" | xz > "${artefactdir}/binaries/${bundle_name}.tar.xz"

        mkdir -p "${artefactdir}/docs"
        if [ -d "${docs_bundle_name}" ]; then
            echo "Archiving ${docs_bundle_name}.tar.xz"
            $ROOTCMD tar -cf - $TAR_OPTIONS "${docs_bundle_name}" | xz > "${artefactdir}/docs/${docs_bundle_name}.tar.xz"
            echo "Archiving ${docs_bundle_name}.zip"
            zip -r "${artefactdir}/docs/${docs_bundle_name}.zip" "${docs_bundle_name}"
        fi
    )

    # Archive sources
    if [ -d "${cachedir}/source" ]; then
        mkdir -p "${artefactdir}/sources"
        find "${cachedir}/source" -type f -maxdepth 1 | while read file; do
            cp -a "$file" "${artefactdir}/sources"
        done
    fi
    if [ -d "${cachedir}/tools" ]; then
        mkdir -p "${artefactdir}/tools"
        find "${cachedir}/tools" -type f -maxdepth 1 | while read file; do
            cp -a "$file" "${artefactdir}/tools"
        done
    fi

    # Test archive
    (
        echo "Test archive functionality"
        rm -rf test
        mkdir test
        cd test

        tar -xvf "${artefactdir}/binaries/${bundle_name}.tar.xz"
        cd "$bundle_name"

        echo "Test ome-files version"
        bin/ome-files --version
        echo "Test ome-files usage"
        bin/ome-files --usage
        echo "Test ome-files help"
        bin/ome-files --help | cat

        echo "Test ome-files info version"
        bin/ome-files info --version
        echo "Test ome-files info usage"
        bin/ome-files info --usage
        echo "Test ome-files info help"
        bin/ome-files info --help | cat

    )
    echo "Complete"
}

usage() {
    cat <<EOF
Usage: $(basename $0) [options]"

Actions:
  -h         Display this help text
  -B         Build and install (default action)

Options:
  -w dir     Set workspace directory (sets defaults for all directory paths below)
  -s dir     Set source directory
  -b dir     Set build directory
  -i dir     Set installation directory
  -a dir     Set artefact directory
  -c dir     Set cache directory

  -g branch  Set git branch or tag to release from
  -G         Build from git (rather than the default source release archive)
  -n         Do not build third-party prerequisites
  -p mode    Purge cache (none|all|build|tools)
  -t type    Build type (Debug|Release)
  -S system  Build system (Unix Makefiles|Ninja)
  -d         Build doxygen API reference
  -L         Run sphinx link checks
  -e         Run extended tests
  -j n       Build in parallel
  -P         Enable paralellism in subsidiary builds
  -N n       Build number
  -F         Build performance tests
  -q         Build Qt interface
  -W         Build Python wrapper
  -v         Verbose build

EOF
}

workspace="$(/bin/pwd)"
sourcedir="${workspace}/source"
builddir="${workspace}/build"
installdir="${workspace}/install"
artefactdir="${workspace}/artefacts"
cachedir="${workspace}/cache"

git_branch=HEAD
purge=none
build_type=Debug
build_system="Unix Makefiles"
doxygen=OFF
linkcheck=OFF
extended_tests=OFF
verbose=OFF
parallel=
parallel_opt=OFF
build_git=OFF
build_tp_prereqs=ON
build_packages="ome-files;ome-cmake-superbuild-docs;ome-cmake-superbuild-docs-contents"
build_number=

# Parse command line options.
while getopts hBGqWndLexvPi:b:c:a:g:N:p:t:S:w:s:j: OPT; do
    case "$OPT" in
        h)
            usage
            exit 0
            ;;
        B)
            :
            ;;
        G)
            build_git=ON
            ;;
        n)
            build_tp_prereqs=OFF
            ;;
        F)
            build_packages="${build_packages};ome-files-performance"
            ;;
        q)
            build_packages="${build_packages};ome-qtwidgets"
            ;;
        W)
            build_packages="${build_packages};ome-files-py"
            ;;
        d)
            doxygen=ON
            ;;
        L)
            linkcheck=ON
            ;;
        e)
            extended_tests=ON
            ;;
        v)
            verbose=ON
            ;;
        P)
            parallel_opt=ON
            ;;
        i)
            installdir="$OPTARG"
            ;;
        b)
            builddir="$OPTARG"
            ;;
        c)
            cachedir="$OPTARG"
            ;;
        a)
            artefactdir="$OPTARG"
            ;;
        g)
            git_branch="$OPTARG"
            ;;
        N)
            build_number="$OPTARG"
            ;;
        p)
            purge="$OPTARG"
            ;;
        t)
            build_type="$OPTARG"
            ;;
        S)
            build_system="$OPTARG"
            ;;
        w)
            workspace="$OPTARG"
            sourcedir="${workspace}/source"
            builddir="${workspace}/build"
            installdir="${workspace}/install"
            artefactdir="${workspace}/artefacts"
            cachedir="${workspace}/cache"
            ;;
        s)
            sourcedir="$OPTARG"
            ;;
        j)
            parallel="-j $OPTARG"
            ;;
        \?)
            usage >&2
            exit 1
            ;;
    esac
done

# Remove the switches parsed above.
shift `expr $OPTIND - 1`

check_cache_validity
build
